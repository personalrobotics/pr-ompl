###############################################################################
# CMake config file for pr-ompl
#
# This sets the following variables:
# @PROJECT_NAME@_INCLUDE_DIRS - Directories containing the pr-ompl include files.
# @PROJECT_NAME@_LIBRARIES    - Libraries needed to use pr-ompl.
# @PROJECT_NAME@_VERSION      - pr-ompl version.
###############################################################################

@PACKAGE_INIT@

function(pr-ompl_traverse_components output_variable)
  set(output_components)

  foreach(component ${ARGN})
    # We should be able to eliminate the <C>_VISITED property by detecting
    # whether the <C>_FOUND property is DEFINED. Unfortunately, DEFINED checks
    # whether or not define_property() was called, not whether the variable was
    # set. The exact behavior seems to vary between CMake versions, so we use
    # an extra variable instead.
    get_property(is_visited DIRECTORY PROPERTY "pr-ompl_${component}_VISITED")
    set_property(DIRECTORY PROPERTY "pr-ompl_${component}_VISITED" TRUE)

    if(NOT is_visited)
      set(component_include
        "${CMAKE_CURRENT_LIST_DIR}/pr-ompl_${component}Component.cmake")
      set(target_include
        "${CMAKE_CURRENT_LIST_DIR}/pr-ompl_${component}Targets.cmake")

      if(EXISTS "${component_include}" AND EXISTS "${target_include}")
        include("${component_include}")

        set_property(DIRECTORY PROPERTY "pr-ompl_${component}_FOUND" TRUE)
        set_property(DIRECTORY
          PROPERTY "pr-ompl_${component}_INCLUDE_DIRS"
          ${pr-ompl_${component}_INCLUDE_DIRS})
        set_property(DIRECTORY
          PROPERTY "pr-ompl_${component}_DEFINITIONS"
          ${pr-ompl_${component}_DEFINITIONS})
        set_property(DIRECTORY
          PROPERTY "pr-ompl_${component}_LIBRARIES"
          ${pr-ompl_${component}_LIBRARIES})
        set_property(DIRECTORY
          PROPERTY "pr-ompl_${component}_DEPENDENCIES"
          ${pr-ompl_${component}_DEPENDENCIES})

        pr-ompl_traverse_components("${output_variable}" 
          ${pr-ompl_${component}_DEPENDENCIES})

        include("${target_include}")

        # This is not necessary in recent versions of cmake, which supports
        # transitive includes via INTERFACE_INCLUDE_DIRECTORIES.
        foreach(dependency ${pr-ompl_${component}_DEPENDENCIES})
          set_property(DIRECTORY APPEND
            PROPERTY "pr-ompl_${component}_INCLUDE_DIRS"
            ${pr-ompl_${dependency}_INCLUDE_DIRS})
          set_property(DIRECTORY APPEND
            PROPERTY "pr-ompl_${component}_DEFINITIONS"
            ${pr-ompl_${dependency}_DEFINITIONS})
          # LIBRARIES is automatically inherited via INTERFACE_LINK_LIBRARIES.
        endforeach()

        list(APPEND output_components "${component}")
      else()
        set_property(DIRECTORY PROPERTY "pr-ompl_${component}_FOUND" FALSE)
      endif()
    endif()
  endforeach()

  set("${output_variable}" ${output_components} PARENT_SCOPE)
endfunction()

function(pr-ompl_export_variable variable)
  set("${variable}" ${${variable}} CACHE INTERNAL "")
endfunction()

function(pr-ompl_export_property variable)
  get_property(value DIRECTORY PROPERTY "${variable}")
  set("${variable}" ${value} CACHE INTERNAL "")
endfunction()

function(pr-ompl_export_notfound variable)
  set("${variable}" "${variable}-NOTFOUND" CACHE INTERNAL "")
endfunction()

function(pr-ompl_package_init)
  pr-ompl_traverse_components(required_components "${ARGN}")

  set(pr-ompl_INCLUDE_DIRS)
  set(pr-ompl_DEFINITIONS)
  set(pr-ompl_LIBRARIES)

  foreach(component ${ARGN})
    pr-ompl_export_property("pr-ompl_${component}_FOUND")

    if(pr-ompl_${component}_FOUND)
      pr-ompl_export_property("pr-ompl_${component}_INCLUDE_DIRS")
      pr-ompl_export_property("pr-ompl_${component}_DEFINITIONS")
      pr-ompl_export_property("pr-ompl_${component}_LIBRARIES")
      pr-ompl_export_property("pr-ompl_${component}_DEPENDENCIES")

      list(APPEND pr-ompl_INCLUDE_DIRS ${pr-ompl_${component}_INCLUDE_DIRS})
      list(APPEND pr-ompl_DEFINITIONS ${pr-ompl_${component}_DEFINITIONS})
      list(APPEND pr-ompl_LIBRARIES ${pr-ompl_${component}_LIBRARIES})
    else()
      pr-ompl_export_notfound("pr-ompl_${component}_INCLUDE_DIRS")
      pr-ompl_export_notfound("pr-ompl_${component}_DEFINITIONS")
      pr-ompl_export_notfound("pr-ompl_${component}_LIBRARIES")
      pr-ompl_export_notfound("pr-ompl_${component}_DEPENDENCIES")
    endif()
  endforeach()

  pr-ompl_export_variable(pr-ompl_INCLUDE_DIRS)
  pr-ompl_export_variable(pr-ompl_DEFINITIONS)
  pr-ompl_export_variable(pr-ompl_LIBRARIES)
endfunction()

#==============================================================================

# Use find_package_handle_standard_args to generate output. This handles the
# REQUIRED keyword, sets pr-ompl_FOUND, and generates the appropriate STATUS and
# FATAL_ERROR messages. We intentionally do not check pr-ompl_LIBRARIES here
# because it may be empty if the user did not specify any COMPONENTS.
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(pr-ompl
  FOUND_VAR pr-ompl_FOUND
  REQUIRED_VARS pr-ompl_PACKAGE_INCLUDE_DIRS
  HANDLE_COMPONENTS)
