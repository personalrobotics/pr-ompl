###############################################################################
# CMake config file for search
#
# This sets the following variables:
# @PROJECT_NAME@_INCLUDE_DIRS - Directories containing the search include files.
# @PROJECT_NAME@_LIBRARIES    - Libraries needed to use search.
# @PROJECT_NAME@_VERSION      - search version.
###############################################################################

@PACKAGE_INIT@

function(search_traverse_components output_variable)
  set(output_components)

  foreach(component ${ARGN})
    # We should be able to eliminate the <C>_VISITED property by detecting
    # whether the <C>_FOUND property is DEFINED. Unfortunately, DEFINED checks
    # whether or not define_property() was called, not whether the variable was
    # set. The exact behavior seems to vary between CMake versions, so we use
    # an extra variable instead.
    get_property(is_visited DIRECTORY PROPERTY "search_${component}_VISITED")
    set_property(DIRECTORY PROPERTY "search_${component}_VISITED" TRUE)

    if(NOT is_visited)
      set(component_include
        "${CMAKE_CURRENT_LIST_DIR}/search_${component}Component.cmake")
      set(target_include
        "${CMAKE_CURRENT_LIST_DIR}/search_${component}Targets.cmake")

      if(EXISTS "${component_include}" AND EXISTS "${target_include}")
        include("${component_include}")

        set_property(DIRECTORY PROPERTY "search_${component}_FOUND" TRUE)
        set_property(DIRECTORY
          PROPERTY "search_${component}_INCLUDE_DIRS"
          ${search_${component}_INCLUDE_DIRS})
        set_property(DIRECTORY
          PROPERTY "search_${component}_DEFINITIONS"
          ${search_${component}_DEFINITIONS})
        set_property(DIRECTORY
          PROPERTY "search_${component}_LIBRARIES"
          ${search_${component}_LIBRARIES})
        set_property(DIRECTORY
          PROPERTY "search_${component}_DEPENDENCIES"
          ${search_${component}_DEPENDENCIES})

        search_traverse_components("${output_variable}" 
          ${search_${component}_DEPENDENCIES})

        include("${target_include}")

        # This is not necessary in recent versions of cmake, which supports
        # transitive includes via INTERFACE_INCLUDE_DIRECTORIES.
        foreach(dependency ${search_${component}_DEPENDENCIES})
          set_property(DIRECTORY APPEND
            PROPERTY "search_${component}_INCLUDE_DIRS"
            ${search_${dependency}_INCLUDE_DIRS})
          set_property(DIRECTORY APPEND
            PROPERTY "search_${component}_DEFINITIONS"
            ${search_${dependency}_DEFINITIONS})
          # LIBRARIES is automatically inherited via INTERFACE_LINK_LIBRARIES.
        endforeach()

        list(APPEND output_components "${component}")
      else()
        set_property(DIRECTORY PROPERTY "search_${component}_FOUND" FALSE)
      endif()
    endif()
  endforeach()

  set("${output_variable}" ${output_components} PARENT_SCOPE)
endfunction()

function(search_export_variable variable)
  set("${variable}" ${${variable}} CACHE INTERNAL "")
endfunction()

function(search_export_property variable)
  get_property(value DIRECTORY PROPERTY "${variable}")
  set("${variable}" ${value} CACHE INTERNAL "")
endfunction()

function(search_export_notfound variable)
  set("${variable}" "${variable}-NOTFOUND" CACHE INTERNAL "")
endfunction()

function(search_package_init)
  search_traverse_components(required_components "${ARGN}")

  set(search_INCLUDE_DIRS)
  set(search_DEFINITIONS)
  set(search_LIBRARIES)

  foreach(component ${ARGN})
    search_export_property("search_${component}_FOUND")

    if(search_${component}_FOUND)
      search_export_property("search_${component}_INCLUDE_DIRS")
      search_export_property("search_${component}_DEFINITIONS")
      search_export_property("search_${component}_LIBRARIES")
      search_export_property("search_${component}_DEPENDENCIES")

      list(APPEND search_INCLUDE_DIRS ${search_${component}_INCLUDE_DIRS})
      list(APPEND search_DEFINITIONS ${search_${component}_DEFINITIONS})
      list(APPEND search_LIBRARIES ${search_${component}_LIBRARIES})
    else()
      search_export_notfound("search_${component}_INCLUDE_DIRS")
      search_export_notfound("search_${component}_DEFINITIONS")
      search_export_notfound("search_${component}_LIBRARIES")
      search_export_notfound("search_${component}_DEPENDENCIES")
    endif()
  endforeach()

  search_export_variable(search_INCLUDE_DIRS)
  search_export_variable(search_DEFINITIONS)
  search_export_variable(search_LIBRARIES)
endfunction()

#==============================================================================

# Use find_package_handle_standard_args to generate output. This handles the
# REQUIRED keyword, sets search_FOUND, and generates the appropriate STATUS and
# FATAL_ERROR messages. We intentionally do not check search_LIBRARIES here
# because it may be empty if the user did not specify any COMPONENTS.
include(FindPackageHandleStandardArgs)
find_package_handle_standard_args(search
  FOUND_VAR search_FOUND
  REQUIRED_VARS search_PACKAGE_INCLUDE_DIRS
  HANDLE_COMPONENTS)
